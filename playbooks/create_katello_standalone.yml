---
- name: create standalone katello system
  hosts: buildhost
  gather_facts: true
  remote_user: root
  vars:
    vms:
      - katello.linux.lab
  tasks:
    - name: include set vm vars
      include_role:
        name: RobVerduijn.lab.set_vm_vars

    - name: delete {{ vms | join(' ') }}
      include_role:
        name: RobVerduijn.lab.delete_guest
      when:
        - delete_vm is defined
        - delete_vm | bool

    - name: create {{ vms | join(' ') }}
      include_role:
        name: RobVerduijn.lab.create_guest

    - name: ensure guests are started
      community.libvirt.virt:
        name: "{{ guest['key'] }}"
        state: running
      loop: "{{ guests | dict2items }}"
      loop_control:
        loop_var: guest

    - name: add guests to inventory
      include_role:
        name: RobVerduijn.lab.add_guest_to_inventory
      loop: "{{ guests | dict2items }}"
      loop_control:
        loop_var: guest

- name: customize katello server
  hosts: katello.linux.lab
  gather_facts: false
  remote_user: root
  environment:
    FOREMAN_PASSWORD: "{{ foreman_installer_option_admin_password }}"
    FOREMAN_SERVER_URL: https://{{ inventory_hostname }}
    FOREMAN_USERNAME: "{{ foreman_installer_option_admin }}"
    FOREMAN_VALIDATE_CERTS: false

  tasks:
    - name: wait for {{ inventory_hostname }} to fully start
      wait_for_connection:

    - name: gather facts
      setup:

    - name: include roles
      include_role:
        name: "{{ role_name }}"
      loop:
        - RobVerduijn.lab.add_swap_file
        - RobVerduijn.lab.remove_cloud_init
        - fedora.linux_system_roles.network
        - fedora.linux_system_roles.timesync
      loop_control:
        loop_var: role_name
      vars:
        swap_file_size_mb: 4096  # MiB

    - name: install release packages
      package:
        name: '{{ katello_repos  }}'
        state: present
        disable_gpg_check: true

    - name: enable dnf modules
      dnf:
        name: '@{{ module.name }}:{{ module.version }}'
        state: present
      loop: "{{ dnf_modules }}"
      loop_control:
        loop_var: module

    - name: Enable CentOS repos
      community.general.ini_file:
        path: /etc/yum.repos.d/{{ repo.repofile }}
        create: false  # so raise error if not already installed
        section: "{{ repo.name }}"
        option: enabled
        value: 'true'
      loop: "{{ centos_repos }}"
      loop_control:
        loop_var: repo

    - name: update system
      package:
        name: '*'
        state: latest
      tags:
        - skip_ansible_lint

    - name: conditional_reboot
      include_role:
        name: RobVerduijn.lab.conditional_reboot

    - name: ensure hostname resolves
      lineinfile:
        path: /etc/hosts
        regexp: "^{{ network[0]['ip']['address'][0] | ansible.netcommon.ipaddr('address') }} {{ inventory_hostname }} {{ inventory_hostname.split('.')[0] }}"
        line: "{{ network[0]['ip']['address'][0] | ansible.netcommon.ipaddr('address') }} {{ inventory_hostname }} {{ inventory_hostname.split('.')[0] }}"
        state: present

    - name: check if foreman is already installed
      stat:
        path: /etc/foreman-installer/scenarios.d/.installed
      register: installed_file

    - name: "Install {{ foreman_installer_package }}"
      package:
        name: "{{ foreman_installer_package }}"
        state: present

    - name: set installer command
      set_fact:
        install_cmd: "{{ foreman_install_cmd }}"

    - name: set foreman initial organization
      set_fact:
        install_cmd: >-
          {{ install_cmd }}
          --foreman-initial-organization '{{ foreman_installer_option_org }}'
      when:
        - foreman_installer_option_org is defined
        - not installed_file['stat']['exists']

    - name: set foreman initial location
      set_fact:
        install_cmd: >-
          {{ install_cmd }}
          --foreman-initial-location '{{ foreman_installer_option_loc }}'
      when:
        - foreman_installer_option_loc is defined
        - not installed_file['stat']['exists']

    - name: set foreman initial admin account
      set_fact:
        install_cmd: >-
          {{ install_cmd }}
          --foreman-initial-admin-username '{{ foreman_installer_option_admin }}'
      when:
        - foreman_installer_option_admin is defined
        - not installed_file['stat']['exists']

    - name: set foreman initial admin password
      set_fact:
        install_cmd: >-
          {{ install_cmd }}
          --foreman-initial-admin-password '{{ foreman_installer_option_admin_password }}'
      when:
        - foreman_installer_option_admin_password is defined
        - not installed_file['stat']['exists']

    - name: set foreman to {{ (foreman_enable_remote_execution|bool) | ternary("enable", "disable") }} remote execution
      set_fact:
        install_cmd: >-
          {{ install_cmd }}
          {{ (foreman_enable_remote_execution|bool) | ternary("--enable-foreman-plugin-remote-execution", "--no-enable-foreman-plugin-remote-execution") }}
          {{ (foreman_enable_remote_execution|bool) |
            ternary("--enable-foreman-proxy-plugin-remote-execution-ssh", "--no-enable-foreman-proxy-plugin-remote-execution-ssh") }}
      when:
        - foreman_enable_ansible is defined

    # the installer cannot configure all options in one run
    # the first run sets the basic options required by the next installer run
    # - organization
    # - location
    # - admin account
    # - enable remote execution  ( required by the ansible plugin )
    # skipping this task when this play has already installed katello before
    - name: Fase 1 Run installer
      command: "{{ install_cmd }}"
      register: foreman_installer_run
      changed_when: foreman_installer_run['rc'] == 2
      failed_when: foreman_installer_run['rc'] not in [0, 2]
      when: not installed_file['stat']['exists']

    - name: set foreman to {{ (foreman_enable_compute_libvirt|bool) | ternary("enable", "disable") }}  libvirt_compute_resource
      set_fact:
        install_cmd: >-
          {{ install_cmd }}
          {{ (foreman_enable_compute_libvirt|bool) | ternary("--enable-foreman-compute-libvirt","--no-enable-foreman-compute-libvirt") }}
      when:
        - foreman_enable_compute_libvirt is defined

    - name: set foreman to {{ (foreman_enable_ansible|bool) | ternary("enable", "disable") }} ansible
      set_fact:
        install_cmd: >-
          {{ install_cmd }}
          {{ (foreman_enable_ansible|bool) | ternary("--enable-foreman-plugin-ansible", "--no-enable-foreman-plugin-ansible") }}
          {{ (foreman_enable_ansible|bool) | ternary("--enable-foreman-proxy-plugin-ansible", "--no-enable-foreman-proxy-plugin-ansible") }}
      when:
        - foreman_enable_ansible is defined

    - name: Fase 2 Run installer
      command: "{{ install_cmd }}"
      register: foreman_installer_run
      changed_when: foreman_installer_run['rc'] == 2
      failed_when: foreman_installer_run['rc'] not in [0, 2]

    - name: set foreman to {{ (foreman_enable_compute_libvirt|bool) | ternary("enable", "disable") }}  libvirt_compute_resource
      set_fact:
        install_cmd: >-
          {{ install_cmd }}
          {{ (foreman_enable_compute_libvirt|bool) | ternary("--enable-foreman-compute-libvirt","--no-enable-foreman-compute-libvirt") }}
      when:
        - foreman_enable_compute_libvirt is defined

    - name: Fase 3 Run installer
      command: "{{ install_cmd }}"
      register: foreman_installer_run
      changed_when: foreman_installer_run['rc'] == 2
      failed_when: foreman_installer_run['rc'] not in [0, 2]

    - name: get foreman user info
      getent:
        database: passwd
        key: foreman

    - name: create ssh key pair for the foreman user (4096 bits, rsa)
      community.crypto.openssh_keypair:
        path: "{{ getent_passwd['foreman'][4] }}/.ssh/id_rsa"
        owner: foreman
        group: foreman

    - name: read foreman pubkey
      slurp:
        src: "{{ getent_passwd['foreman'][4] }}/.ssh/id_rsa.pub"
      register: foreman_pubkey

    - block:
        - name: add foreman user
          user:
            name: foreman
            home: /var/lib/foreman
            state: present

        - name: install authorized key
          ansible.posix.authorized_key:
            user: foreman
            state: present
            key: "{{ foreman_pubkey['content'] | b64decode }}"

        - name: allow access via polkit
          copy:
            dest: /etc/polkit-1/rules.d/20-libvirt-foreman-manage.rules
            content: |
              polkit.addRule(function(action, subject) {
                if ( action.id == "org.libvirt.unix.manage" && ( subject.isInGroup("admins")  || subject.user == "foreman" )) {
                  return polkit.Result.YES;
                }
              });
            mode: 0644

        - name: get {{ groups['buildhost'][0] }} host pub key
          slurp:
            src: /etc/ssh/ssh_host_ecdsa_key.pub
          register: compute_pubkey

        - name: add spice service to firewalld libvirt zone on {{ groups['buildhost'][0] }}
          ansible.posix.firewalld:
            zone: libvirt
            service: spice
            permanent: true
            state: enabled

      delegate_to: "{{ groups['buildhost'][0] }}"
      remote_user: root

    - name: add {{ groups['buildhost'][0] }} pub foreman known_hosts file
      known_hosts:
        name: "{{ groups['buildhost'][0] }}"
        key: "{{ groups['buildhost'][0] }} {{ compute_pubkey['content'] | b64decode }}"
        path: "{{ getent_passwd['foreman'][4] }}/.ssh/known_hosts"
        state: present

    - name: ensure known hosts file is owned by foreman
      file:
        path: "{{ getent_passwd['foreman'][4] }}/.ssh/known_hosts"
        owner: foreman
        group: foreman
        mode: 0644
        state: file

    - name: Create livirt compute resource
      theforeman.foreman.compute_resource:
        name: "{{ groups['buildhost'][0] }}"
        locations:
          - "{{ foreman_installer_option_loc }}"
        organizations:
          - "{{ foreman_installer_option_org }}"
        provider: libvirt
        provider_params:
          url: qemu+ssh://{{ groups['buildhost'][0] }}/system
          display_type: spice
          set_console_password: false
        state: present

    - name: ready
      debug:
        msg: "{{ inventory_hostname }} is ready"
