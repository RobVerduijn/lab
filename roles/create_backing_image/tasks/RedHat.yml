---
- block:
    - name: debug play hosts
      debug:
        var: ansible_play_hosts_all
    
    - name: debug guest
      debug:
        var: hostvars[guest['key']]

    - name: wait for guest to fully start
      wait_for_connection:
        timeout: 3600
      
    - name: gather facts
      setup:

    - name: register system
      include_role:
        name: RobVerduijn.lab.subscription
      vars:
        sub_action: register
      when: guests[guest['key']]['guest_def']['dist'] == 'RedHat'

    - name: update packages
      command: dnf update -y --setopt=install_weak_deps=False --nodocs --exclude='*firmware'
      register: update_all
      changed_when: "'Upgraded:' in update_all['stdout']"

    - name: remove big firmware packages
      package:
        name: "*-firmware"
        state: absent
        autoremove: true

    - name: include conditional reboot
      include_role:
        name: RobVerduijn.lab.conditional_reboot

    - name: delete dangling packages
      command: dnf autoremove -y
      register: packages_removed
      changed_when: "'Removed:' in packages_removed['stdout']"

    - name: find old kernels
      command: dnf repoquery --installonly --latest-limit=-2 -q
      register: kernels_found
      changed_when: false

    - name: delete old kernels
      package:
        name: "{{ (kernels_found['stdout'] | trim).split(' ') }}"
        state: absent
        autoremove: true
      when: (kernels_found['stdout'] | trim).split(' ') | length > 0

    - name: install cloud-init and cloud-utils-growpart
      command: dnf install -y --setopt=install_weak_deps=False --nodocs cloud-init cloud-utils-growpart
      register: install_cloud
      changed_when: "'Installed:' in install_cloud['stdout']"

    - name: unregister system
      include_role:
        name: RobVerduijn.lab.subscription
      vars:
        sub_action: unregister
      when: guests[guest['key']]['guest_def']['dist'] == 'RedHat'

    - name: ensure cloud-init services are enabled
      systemd:
        name: "{{ service }}"
        enabled: true
      loop:
        - cloud-init
        - cloud-init-local
        - cloud-final
        - cloud-config
      loop_control:
        loop_var: service
      when: >
        ( ansible_distribution == 'Fedora' )
        or
        ( ansible_distribution_major_version | int > 8 )

  delegate_to: "{{ os_image }}"
  vars:
    ansible_user: "root"

- name: shutdown kvm guest
  community.libvirt.virt:
    command: shutdown
    name: "{{ os_image }}"

- name: ensure the vm is really stopped
  command: virsh list
  register: virsh_list_res
  until: os_image not in virsh_list_res.stdout
  retries: 360
  delay: 10
  changed_when: false

- name: sysprep the {{ os_image }} image
  command: >-
    virt-sysprep -d {{ os_image }}
    --delete '/etc/yum.repos.d/local.repo'
    --delete '/etc/sysconfig/network-scripts/*'
    --delete '/etc/NetworkManager/system-connections/*'
    --delete '/var/lib/systemd/random-seed'
    --truncate '/etc/machine-id'
    --truncate '/etc/resolv.conf'
    --hostname localhost.localdomain
    --selinux-relabel
  tags:
    - skip_ansible_lint
