---
- name: check vm status
  community.libvirt.virt:
    command: status
    name: "{{ guest['key'] }}"
  register: vm_status
  when: guest['key'] in current_vms.list_vms

- name: force stop old vm
  community.libvirt.virt:
    command: destroy
    name: "{{ guest['key'] }}"
  when:
    - guest['key'] in current_vms.list_vms
    - vm_status['status'] != 'shutdown'

- name: test if nvram exists
  stat:
    path: /var/lib/libvirt/qemu/nvram/{{ guest['key'] }}_VARS.fd
    get_checksum: false
    get_attributes: false
    get_mime: false
  register: nvram_file
  changed_when: false


- name: add file to files list
  set_fact:
    files: "{{ [ '/var/lib/libvirt/qemu/nvram/' + guest['key'] + '_VARS.fd' ] }}"      
  when: nvram_file['stat']['exists']

- block:
    - name: undefine old vm
      set_fact:
        virsh_cmd: virsh undefine --nvram {{ guest['key'] }}
    
    - name: undefine old vm
      command: "{{ virsh_cmd }}"
  when: guest['key'] in current_vms.list_vms

- name: create files list
  set_fact:
    files: >-
      {{
        files | default([]) +
        [
          ansible_libvirt_pools
          [
            guests[guest['key']]['guest_def']['devices']['storage']
              [
                storage_dev['key']
              ]
              ['pool']
          ]
          ['path']
          + '/' +
          storage_dev['value']['image']
        ]
      }}
  loop: "{{ guests[guest['key']]['guest_def']['devices']['storage']| dict2items }}"
  loop_control:
    loop_var: storage_dev
  when: storage_dev['value']['image'] | regex_search('.*(qcow2|_cfg\.iso)$')
